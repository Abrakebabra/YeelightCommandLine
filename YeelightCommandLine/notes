
Do:
 - Search udp message to multicast address
 - Receive udp response from multicast address
    - Get IP Port search message was sent from
    - Listen to that IP Port for response
    - Get individual light properties
    - Create new tcp connection to each light
    - Save the light connection and properties
- Light connection:
     - Save properties
     - Save connection
     - Encode JSON

    As a loop in a separate thread
     - Listen for responses
     - When responses are received, filter between
         - Confirmation of received command messages
         - Error messages
         - Change of state


     - Music mode?  Create separate TCP connection
     - Color Flow?
 - Work on main program with commands

 - Make a readme

 - ensure only method enum is passed on as valid method
3

- // case "adjust_ct": - This doesn't make sense
// case "adjust_color": - This doesn't make sense
Asked yeelight developer forum.
https://forum.yeelight.com/t/topic/17006


Fix:
 - Sort out error names: Only enum cases are printed, not enum name itself.
 - Light should actually be a reference type in case it's ever copied. DONE




Last login: Wed Apr  8 03:55:25 on ttys002
Keiths-MacBook-Pro:~ keithlee$ /Users/keithlee/Library/Developer/Xcode/DerivedData/YeelightCommandLine-hangmkwvyhrhxfgzniqkugropnmk/Build/Products/Debug/YeelightCommandLine ; exit;
udp searchBytes sent!
connection found!
connection found!
connection found!
connection found!
connection found!
message received
479 bytes
parsing properties...
found property id
creating new light...
light not found
Awaiting input
exit
LOOP ENDED
logout
Saving session...
...copying shared history...
...saving history...truncating history files...
...completed.

[Process completed]











Learn:

- Network classes
    - New socket and connect
    - Send and receive both UDP and TCP
    - Isolate socket from NWEndpoint.hostport
    - Listen on that port
    - Handling program flow with the network functions on a different queue/thread

 - Dispatch Queues and Groups
    - Async, sync, semaphores and QoS

 - Enumerations
    - How to use them

 - Switch Cases
    - When and how to use them

 - Structs
    - What they are, when they're used, what for

 - Error Handing and Do-Catch with Guard Try

 - Handling JSON files and nested JSON
    - https://developer.apple.com/swift/blog/?id=37

 - Closures, escaping closures and completion handlers, typealias







About Lights

UDP RESPONSE
'HTTP/1.1 200 OK\r\nCache-Control: max-age=3600\r\nDate: \r\nExt: \r\nLocation: yeelight://192.168.1.2:55443\r\nServer: POSIX UPnP/1.0 YGLC/1\r\nid: 0x0000000007e71ffd\r\nmodel: color\r\nfw_ver: 65\r\nsupport: get_prop set_default set_power toggle set_bright start_cf stop_cf set_scene cron_add cron_get cron_del set_ct_abx set_rgb set_hsv set_adjust adjust_bright adjust_ct adjust_color set_music set_name\r\npower: on\r\nbright: 94\r\ncolor_mode: 2\r\nct: 6500\r\nrgb: 1042687\r\nhue: 186\r\nsat: 94\r\nname: \r\n'


COMMANDS
{"id":1,"method":"set_default","params":[]}
{"id":1,"method":"set_scene", "params": ["hsv", 300, 70, 100]}
{"id":1,"method":"get_prop","params":["power", "not_exist", "bright"]}


TCP RESPONSES
Direct response:
{"id":1, "result":["ok"]}
{"id":1, "result":["on", "", "100"]}
{"id":1, "result":[{"type": 0, "delay": 15, "mix": 0}]}  (CRON_GET NOT USED)
{"id":2, "error":{"code":-1, “message”:"unsupported method"}}

Sent to all connected devices when a state is updated:
{"method":"props", "params":{"ct":6500}}


METHODS:

 - adjust_bright:
    Inc/dec by percentage points over set time.
    Could be useful for gradual increases or decreases in light.
    If number will exceed 100, light will set to 100.
    If number will be less than 1, light will turn off and brightness state will remain in previous value.


 - adjust_color:
    Changes color_mode to 1
    Any integer input will cycle the light rgb through set values in the rainbow. Direction of cycle is the same, regardless of integer input and direction (positive/negative)


 - adjust_ct:
    Absolute junk.
    Changes color mode to 2.
    Min ct is 1700, max is 6500.
    Positive integer increases absolute value by that percentage (rounded down).
    ct of 1872 and input of 8 will result in ct of 2021.
    ct of 2021 and input of 11 will result in ct of 2243.
    ct of 2243 and input of 100 will result in ct of 4486.
    Will not exceed 6500.
    Will not go below 1700.
    Negative integer decreases absolute value by 100-int percentage (rounded down.)
    ct of 6500 and input of -73 will result in ct of 1755.
    What the hell is the point of this stupid adjustment method?


 - set_color (rgb)
    0 is not valid in contrast to documentation


 - cron methods
    Timer can only power off light at the moment according to documentation
    Likely won't use this.


 - bg methods
    Won't use because I don't own a light capable of these functions


 - limited functionality lights
    Don't own any so not yet building any safety mechanisms to prevent sending invalid requests





LIGHT IDs:
# 0x0000000007e71dfa - stand mid
# 0x0000000007e74620 - tv
# 0x00000000080394cb - stand top
# 0x00000000080477df - stand bottom
# 0x00000000080188f1- back
# 0x0000000007e71ffd - bike







// NO LONGER REQUIRED?
// updates the state if response from light is "ok"

fileprivate func OLDupdateState(_ method: methodEnum, _ param1: Any? = nil, _ param2: Any? = nil, _ param3: Any? = nil, _ param4: Any? = nil) throws {

switch method {
case .set_ct_abx:

guard let colorTemp = param1 as? Int else {
throw LightStateUpdateError.param1("colorTemp to Int failed")
}
self.state.colorTemp = colorTemp
self.state.colorMode = 2

case .set_rgb:

guard let rgb = param1 as? Int else {
throw LightStateUpdateError.param1("rgb to Int failed")
}
self.state.rgb = rgb
self.state.colorMode = 1

case .set_hsv:

guard let hue = param1 as? Int else {
throw LightStateUpdateError.param1("hue to Int failed")
}
self.state.hue = hue

guard let sat = param2 as? Int else {
throw LightStateUpdateError.param2("sat to Int failed")
}
self.state.sat = sat
self.state.colorMode = 3

case .set_bright:

guard let brightness = param1 as? Int else {
throw LightStateUpdateError.param1("brightness to Int failed")
}
self.state.brightness = brightness

case .set_power:

guard let power = param1 as? String else {
throw LightStateUpdateError.param1("power to String failed")
}
if power == "on" {
self.state.power = true
} else {
self.state.power = false
}

case .set_scene:

// action trying to change rgb, ct or hsv
guard let action = param1 as? String else {
throw LightStateUpdateError.param1("set_scene to String failed")
}

switch action {
case "color":
guard let rgb = param2 as? Int else {
throw LightStateUpdateError.param2("rgb to Int failed")
}
self.state.rgb = rgb
self.state.colorMode = 1

guard let brightness = param3 as? Int else {
throw LightStateUpdateError.param3("brightness to Int failed")
}
self.state.brightness = brightness

case "ct":
guard let colorTemp = param2 as? Int else {
throw LightStateUpdateError.param2("colorTemp to Int failed")
}
self.state.colorTemp = colorTemp
self.state.colorMode = 2

guard let brightness = param3 as? Int else {
throw LightStateUpdateError.param3("brightness to Int failed")
}
self.state.brightness = brightness

case "hsv":
guard let hue = param2 as? Int else {
throw LightStateUpdateError.param2("hue to Int failed")
}
self.state.hue = hue

guard let sat = param3 as? Int else {
throw LightStateUpdateError.param3("sat to Int failed")
}
self.state.sat = sat
self.state.colorMode = 3

guard let brightness = param4 as? Int else {
throw LightStateUpdateError.param4("brightness to Int failed")
}
self.state.brightness = brightness

default:
throw LightStateUpdateError.param1("Action not color, ct or hsv")
}

case .set_name:

guard let name = param1 as? String else {
throw LightStateUpdateError.param1("name to Int failed")
}
self.name = name

case .adjust_bright:

guard let change = param1 as? Int else {
throw LightStateUpdateError.param1("adjust_bright to Int failed")
}
let newValue = self.state.brightness + change
if newValue < 1 {
self.state.brightness = 1
} else if newValue > 100 {
self.state.brightness = 100
} else {
self.state.brightness = newValue
}

} // switch method
} // updateState
